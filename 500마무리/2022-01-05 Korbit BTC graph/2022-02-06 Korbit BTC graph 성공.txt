import requests
import datetime
# from datetime import datetime
from time import sleep
#now = datetime.now()
#print(now.hour)
#print("지금은", now.year, "년", now.month, "월", now.day, "일", now.hour, "시", now.minute, "분", now.second, "초입니다. \n")


import os
import os.path

import csv
import json
import shutil

import openpyxl
from openpyxl.chart import BarChart,LineChart,Series,Reference
from openpyxl.styles import Font, Alignment
from openpyxl.styles import Border, Side, Color, PatternFill

import winsound as ws

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders


v = os.path.isfile("C:/Users/ahnss/Desktop/korbit.csv")
if v == False:
    f = open("C:/Users/ahnss/Desktop/korbit.csv", mode="w", encoding="cp949", newline='')
    writer = csv.writer(f)
    writer.writerow(['nowDatetime', 'type', 'price', 'amount','tid'])
    print(" make korbit.csv first line --> nowDatetime type  price  amount tid ----")
    f.close()

v = os.path.isfile("C:/Users/ahnss/Desktop/BTCfile.xlsx")
if v == False:
    ### f = open("C:/Users/ahnss/Desktop/BTCfile.xlsx", mode="w", encoding="cp949", newline='')
    BTCfile = openpyxl.Workbook()
    BTCfile.create_sheet()
    BTCSheet = BTCfile['Sheet']
    BTCSheet.cell(1, 1).value = 'nowDatetime'
    BTCSheet.cell(1, 2).value = 'BTCpriceNow'
    BTCSheet.cell(1, 3).value = 'BTCprice'
    BTCSheet.cell(1, 4).value = 'BTCmaxprice'
    BTCSheet.cell(1, 5).value = 'BTCminprice'
    BTCSheet.cell(1, 6).value = 'BTCdiff'
    BTCSheet.cell(1, 7).value = 'nowDatetime'
    BTCSheet.cell(1, 8).value = 'buycnt'
    BTCSheet.cell(1, 9).value = 'sellcnt'
    BTCSheet.cell(1, 10).value = 'nowDatetime'
    BTCSheet.cell(1, 11).value = 'buyamt'
    BTCSheet.cell(1, 12).value = 'sellamt'
    BTCSheet.cell(1, 13).value = 'ttlamt'
    # ---------------------------------------------------
    BTCSheet.cell(1, 14).value = 'nowDatetime'
    BTCSheet.cell(1, 15).value = 'marketcnt'
    BTCSheet.cell(1, 16).value = 'marketamt'
    BTCSheet.cell(1, 17).value = 'marketper'
    BTCSheet.cell(1, 18).value = 'nowDatetime'
    BTCSheet.cell(1, 19).value = 'ahncntper'
    BTCSheet.cell(1, 20).value = 'ahnamtper'
    BTCSheet.cell(1, 22).value = 'ahnttlper'
    BTCSheet.cell(1, 23).value = 'ahnperper'
    BTCSheet.cell(1, 24).value = 'BTCdiff'
    BTCSheet.cell(1, 25).value = 'ahnresult'
    BTCSheet.cell(1, 26).value = 'result11'
    BTCSheet.cell(1, 27).value = 'result12'
    # ---------------------------------------------------

    BTCfile.save('C:/Users/ahnss/Desktop/BTCfile.xlsx')
    #f = open("C:/Users/ahnss/Desktop/BTC.csv", mode="w", encoding="cp949", newline='')
    #writer = csv.writer(f)
    #writer.writerow(['nowDatetime','BTCpriceNow','BTCprice','nowDatetime','buycnt', 'buyamt',  'sellcnt', 'sellamt', 'ttlamt','nowDatetime','BTCprice','sellcnt/buycnt','sellamt/buyamt','sellavg/buyavg' )
    #### writer.writerow(['nowDatetime','BTCpriceNow','BTCprice','BTCprice200','buycnt', 'buyamt',  'sellcnt', 'sellamt', 'ttlamt','nowDatetime','BTCprice','sellcnt/buycnt','sellamt/buyamt','sellavg/buyavg' )
    print(" make BTCfile.xlsx --> nowDatetime  BTCpriceNow BTCprice BTCpriceMAX ")
    #f.close()

v = os.path.isfile("C:/Users/ahnss/Desktop/graphfile.xlsx")
if v == False:
    graphfile = openpyxl.Workbook()
    graphfile.create_sheet("Sheet1")
    graphfile.create_sheet("Sheet2")
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    print(" make graphfile.xlsx-->  nowDatetime BTCpriceNow BTCprice BTCpriceMAX ")

v = os.path.isfile("C:/Users/ahnss/Desktop/BTCtxt.txt")
if v == False:
    f = open("C:/Users/ahnss/Desktop/BTCtxt.txt", mode="w")
    p = " date  time  BTCpriceNow BTCprice BTCmax BTCmin BTCdiff  buycnt sellcnt marketcnt ahncntper buyamt sellamt marketamt ahnamtper ttlamt ahnttlper marketper ahnperper  ahnresult  result11 result12 \n"
    f.write(p)
    print(" make BTCtxt.txt  --> Date time  BTCpriceNow BTCprice BTCpriceMAX")
    f.close()
# ---------------------------------------------------
# ---------------------------------------------------


# ================= 이승준 강사의 설명문 =======================================
class color:
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    RED = '\033[91m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    YELLOW = '\033[93m'

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'

    ENDC = '\033[0m'


# Font: 맑은고딕 크기15 굵게
font_15 = Font(name='궁서체', size=15, bold=True)

# Alignment; 가로 세로 가운데 정렬
align_center = Alignment(horizontal='center', vertical='center')
align_vcenter = Alignment(vertical='center')

# Border 테두리 지정
border_thin = Border(left=Side(style='thin'), right=Side('thin'), top=Side('thin'), bottom=Side('thin'))

# PatternFill 셀 색상 지정
fill_orange = PatternFill(patternType='solid', fgColor=Color('FFC000'))
fill_lightgrey = PatternFill(patternType='solid', fgColor=Color('D3D3D3'))
# ================= 이승준 강사의 설명문 =======================================



# ---------------------------------------------------
while 1:
    now = datetime.datetime.now()
    nowDatetime = now.strftime('%Y-%m-%d %H:%M:%S')
    #print(nowDatetime)  # 2015-04-19 12:11:32
    #print(now.hour)
    #print("지금은", now.year, "년", now.month, "월", now.day, "일", now.hour, "시", now.minute, "분",now.second, "초입니다. \n")
    #print(now.day)
    #print(now.hour)
    ahndate1 = nowDatetime[5:11]
    ahndate2 = nowDatetime[11:16]
    ahndate  = ahndate1 + ' / ' + ahndate2
    #print(ahndate)
    #nowDatetime = ahndate
    nowDatetime = ahndate2
    #===============================================================
    # graph가 중첩되어 시간도 많이 걸리고 복잡하므로 Sheet1을 지우고 새로 만들어 사용
    #
    #===============================================================
    #print(graphfile.sheetnames)
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    graphfile.remove(graphSheet)
    graphfile.save("C:/Users/ahnss/Desktop/graphfile.xlsx")
    #print(graphfile.sheetnames)

    graphfile.create_sheet("Sheet1")
    graphfile.save("C:/Users/ahnss/Desktop/graphfile.xlsx")
    #print(graphfile.sheetnames)
    #==================================================================
    #-------------------------------------------------------------------------------
    f = open("C:/Users/ahnss/Desktop/korbit.csv", "a", encoding="cp949", newline='')
    writer = csv.writer(f)
    req = requests.get('https://api.korbit.co.kr/v1/transactions')
    dict = json.loads(req.text)
    #print(req.text)
    #-------------------------------------------------------------------------------
    # korbit data 구조 ---> 여러개를 리스트로 만들어서 저장함
    #   [{"timestamp":1625969554661,"tid":"11777395","price":"39763000","amount":"0.0001337","type":"buy"},
    #    {"timestamp":1625969544303,"tid":"11777394","price":"39769000","amount":"0.00099771","type":"buy"},
    #    {"timestamp":1625969531685,"tid":"11777393","price":"39738000","amount":"0.001","type":"sell"},
    #-------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------
    # 한번 읽어오면 약150-200개 사이임
    for i in range(len(dict)-1,1, -1):
    #for i in range(len(dict), len(dict)):
        #print(i,len(dict))
        timestamp = dict[i].get('timestamp')
        #Korbittime = datetime.datetime.fromtimestamp(timestamp / 1000)
        #Korbittime = datetime.datetime.strptime('timestamp', '%Y-%m-%d %H:%M:%S')
        Korbitdate = datetime.datetime.fromtimestamp(timestamp / 1000).date()
        Korbittime = datetime.datetime.fromtimestamp(timestamp / 1000).time()
        #print(i, Korbitdate,Korbittime)  # 2015-04-19 12:11:32
        #print(i, str(Korbitdate)+str(Korbittime))  # 2015-04-19 12:11:32
        ahndatetime = str(Korbitdate)+str(Korbittime)

        type = dict[i].get('type')
        price = dict[i].get('price')
        amount = dict[i].get('amount')
        tid = dict[i].get('tid')

        #Korbittime = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        # print(now.hour)
        # print("지금은", now.year, "년", now.month, "월", now.day, "일", now.hour, "시", now.minute, "분",now.second, "초입니다. \n")
        # print(now.day)
        # print(now.hour)
        #Kordate1 = Korbittime[5:11]
        #Kordate2 = Korbittime[11:16]
        #Kordate = Kordate1 + ' / ' + Kordate2
        #print(i, Korbittime,Kordate1,Kordate2,"  kordate=",Kordate)  # 2015-04-19 12:11:32
        #writer.writerow([nowDatetime, type, price, amount, tid])
        #writer.writerow([Korbittime, type, price, amount, tid])
        #writer.writerow([ahndate, type, price, amount, tid])
        writer.writerow([ahndatetime, type, price, amount, tid])
        #.writerow([Kordate, type, price, amount, tid])
    f.close()
    # ----------------------------------------------------------
    # ----------------------------------------------------------
    # ----------------------------------------------------------
    BTCpriceNow = price
    #print("--- BTCpriceNow : ", BTCpriceNow)
    sleep(1)
    # ----------------------------------------------------------
    # korbit.csv를 열고 데이타를 딕셔너리로 읽어들인다. DictReader
    # ----------------------------------------------------------
    #print(ahndate1 ,ahndate2 ,"read  korbit data ------------------> ")
    f = open('C:/Users/ahnss/Desktop/korbit.csv', 'r')
    rdr = csv.DictReader(f)
    # ----------------------------------------------------------
    BTCmaxprice = 0
    BTCminprice = 90000000
    BTCdiff = 0

    BTCprice = 0
    buycnt = 0
    sellcnt = 0

    buyamt = 0
    sellamt = 0
    ttlamt = 0

    marketcnt = 0
    marketamt = 0
    marketprice = 0

    ttlline = 0
    ahnkorbit = []
    i = -1
    #----------------------------------------------------------
    for line in rdr:
        # print(line)
        i = i + 1
        ahnkorbit.append([])
        ahnkorbit[i].append(line['type'])
        ahnkorbit[i].append(line['price'])
        ahnkorbit[i].append(line['amount'])
        #print(i, " ", ahnkorbit)
    f.close()
    #=====================================================
    ttlline = i + 1
    ttllinekorbit = ttlline
    #print()
    #print(" korbit ttlline = ", ttlline," ", ahnkorbit[ttlline])
    #==========================================================
    #==========================================================
    i = 0
    BTCpricettl = 0
    # -------------------------------------------------
    # 한 번에 500개씩 읽어온다고 생각되므로 1시간에 3000개 10시간에 30000개 읽어옴
    # 최근 24시간 동안의 약60000개의 사자와 팔자의 비율이 어떻게 되는지 비교해보자
    #for i in range(1, ttlline):
    for i in range(ttlline-30000, ttlline):
        #print(i, " ----- ",ahnkorbit[i][0],"=====", ahnkorbit[i])

        if (float(ahnkorbit[i][1]) > BTCmaxprice):
            BTCmaxprice = float(ahnkorbit[i][1])
        if (float(ahnkorbit[i][1]) < BTCminprice):
            BTCminprice = float(ahnkorbit[i][1])
        #BTCdiff = BTCmaxprice - BTCminprice

        #print("--- BTCprice : ", ahnkorbit[i][1])
        #print(i, " =======>    BTCprice :", float(ahnkorbit[i][1]), " BTCmaxprice :", BTCmaxprice, " - ", BTCminprice, " = ", BTCdiff)
        # if (BTCmaxprice == 0):
        #    BTCmaxprice = BTCprice + 50
        # if (BTCminprice == 0):
        #    BTCminprice = BTCprice - 50
        #if (BTCdiff == 0):
        #    BTCdiff = 100

        if (ahnkorbit[i][0] == 'buy'):
            buycnt = buycnt + 1
            buyamt = buyamt + float(ahnkorbit[i][2])
            BTCpricettl = BTCpricettl + float(ahnkorbit[i][1])
            #print("--- BTCprice : ", float(ahnkorbit[i][1]), " - buycnt : ", buycnt, " ---- amount = ", line['amount'], " ---- buyamt : ", buyamt)
        else:
            sellcnt = sellcnt + 1
            sellamt = sellamt + float(ahnkorbit[i][2])
            BTCpricettl = BTCpricettl + float(ahnkorbit[i][1])
            #print("--- sellcnt : ", sellcnt, " ---- amount = ", line['amount'], " ---- sellamt : ", sellamt)
    ttlamt = buyamt + sellamt
    #print("--- BTCpriceNow : ", BTCpriceNow, " ---- BTCprice = ", BTCprice, " ---- ")
    BTCprice = BTCpricettl / (buycnt + sellcnt)
    # ---------------------------------------------------
    BTCpriceNow = round(float((BTCpriceNow)) / 10000, 0)
    BTCprice = round(float((BTCprice)) / 10000, 0)
    BTCpriceNow = int(BTCpriceNow)
    BTCprice = int(BTCprice)
    BTCdiff = BTCpriceNow - BTCprice
    # BTCdiff =   BTCmaxprice - BTCminprice
    # BTCdiff = round(float(BTCdiff), 0)
    BTCdiff = int(BTCdiff)
    BTCdiffold = 0 # 아래에서 나옴
    # ---------------------------------------------------
    BTCmaxprice = round(float((BTCmaxprice)) / 10000, 0)
    BTCminprice = round(float((BTCminprice)) / 10000, 0)
    BTCmaxprice = int(BTCmaxprice)
    BTCminprice = int(BTCminprice)
    # ---------------------------------------------------
    #print(ahndate1, ahndate2, " =======> ", BTCpriceNow, "   ", BTCprice, "   BTCmaxprice :", BTCmaxprice, " = ", BTCminprice, " BTCdiff=", BTCdiff," BTCdiffold=", BTCdiffold)
    # ---------------------------------------------------
    # ---------------------------------------------------
    #print("-----------korbit  end of line ---")
    #print(ahndate1 ,ahndate2 ,"--- 11 korbit  BTC 가격 : ",float(ahnkorbit[i][1]), " 최근 BTC 1000개 buy : ", buycnt, " 수량 : ", buyamt," <<<>>>  sell : ", sellcnt, " 수량 : ", sellamt)
    #print("--- BTCpriceNow : ", BTCpriceNow, " ---- BTCprice = ", BTCprice, " ---- (buycnt+sellcnt)=",(buycnt+sellcnt))
    marketper = 0
    #=============== 최근 자료 buy sell 주문건수 비교 buy가 많으면 상승장 판단
    if (buycnt > 0 and sellcnt > 0):
        marketcnt =  buycnt/sellcnt*100
        marketper = marketcnt
        #print(" ---marketcnt = ", marketcnt,"  sellcnt=", sellcnt, "  buycnt=", buycnt)

    if (marketcnt > 500):
        result11 = "상승"
        ahnres11 = 30
        #print("--- marketcnt 장-----")
    elif (marketcnt < 500 and marketcnt > 50):
        result11 = "보합"
        ahnres11 = 20
    #    #print("--- marketcnt 보합-----")
    else:
        result11 = "하락"
        ahnres11 = 10
    #    #print("--- marketcnt 하락장-----")

    #=============== 최근 자료의 buy sell 주문수량 비교 buy가 많으면 상승장 판단
    if (sellamt > 0):
        marketamt =  buyamt/sellamt*100
        marketper = marketper + marketamt
    #--------------------------------------------------------------------------
    #print(" ---marketamt = ", marketamt, "  buycnt=", buycnt, " buyamt=", buyamt, "  sellcnt=", sellcnt, "   sellamt=", sellamt)
    if (marketamt > 800):
        result12 = "상상승"
        ahnres12 = 60
        #print("--- marketamt 상승장-----")
    elif (marketamt < 800 and marketamt > 50):
        result12 = "보보합"
        ahnres12 = 40
        #print("--- marketamt 보합-----")
    else:
        result12 = "하하락"
        ahnres12 = 20
        #print("--- marketamt 하락장-----")
    # ----------------------------------------------------
    # ----------------------------------------------------

    # ----------------------------------------------------
    ahnresult  = ahnres11+ahnres12
    # ----------------------------------------------------
    # 그래픽용 --- 10,000개를 합산하니 크기가 커서  100으로 나누어 100단위로 만듬
    #------------------------------------------------------------------


    buyamt= round(float(buyamt), 2)
    sellamt= round(float(sellamt), 2)
    ttlamt = buyamt + sellamt
    ttlamt = round(float(ttlamt),2)

    marketcnt = round(float(marketcnt),0)
    marketamt = round(float(marketamt),0)
    marketper = round(float(marketper),0)

    marketcnt = int(marketcnt)
    marketamt = int(marketamt)
    ttlamt = int(ttlamt)
    marketper = int(marketper)
    # ========================================================================================================
    ahncntper = 0
    ahnamtper = 0
    ahnttlper = 0
    ahnperper = 0
    # ========================================================================================================


    # ========================================================================================================
    #  기존 엑셀 파일 불러와서 100개만 graphfile.xlsx에 저장하고 그래프 만들기
    BTCfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/BTCfile.xlsx", data_only=True)
    BTCSheet = BTCfile['Sheet']
    lenBTCSheet = len(BTCSheet['A'])
    BTCSheet.cell(lenBTCSheet+1, 1).value = nowDatetime
    BTCSheet.cell(lenBTCSheet+1, 2).value = BTCpriceNow
    BTCSheet.cell(lenBTCSheet+1, 3).value = BTCprice
    BTCSheet.cell(lenBTCSheet+1, 4).value = BTCmaxprice
    BTCSheet.cell(lenBTCSheet+1, 5).value = BTCminprice
    BTCSheet.cell(lenBTCSheet+1, 6).value = BTCdiff
    BTCSheet.cell(lenBTCSheet+1, 7).value = nowDatetime
    BTCSheet.cell(lenBTCSheet+1, 8).value = buycnt
    BTCSheet.cell(lenBTCSheet+1, 9).value = sellcnt
    BTCSheet.cell(lenBTCSheet+1, 10).value = nowDatetime
    BTCSheet.cell(lenBTCSheet+1, 11).value = buyamt
    BTCSheet.cell(lenBTCSheet+1, 12).value = sellamt
    BTCSheet.cell(lenBTCSheet+1, 13).value = ttlamt
    # ---------------------------------------------------
    BTCSheet.cell(lenBTCSheet+1, 14).value = nowDatetime
    BTCSheet.cell(lenBTCSheet+1, 15).value = marketcnt
    BTCSheet.cell(lenBTCSheet+1, 16).value = marketamt
    BTCSheet.cell(lenBTCSheet+1, 17).value = marketper
    BTCSheet.cell(lenBTCSheet+1, 18).value = nowDatetime
    BTCSheet.cell(lenBTCSheet+1, 19).value = ahncntper
    BTCSheet.cell(lenBTCSheet+1, 20).value = ahnamtper
    BTCSheet.cell(lenBTCSheet+1, 21).value = ahnttlper
    BTCSheet.cell(lenBTCSheet+1, 22).value = ahnperper
    BTCSheet.cell(lenBTCSheet+1, 23).value = BTCdiff
    BTCSheet.cell(lenBTCSheet+1, 24).value = ahnresult
    BTCSheet.cell(lenBTCSheet+1, 25).value = result11
    BTCSheet.cell(lenBTCSheet+1, 26).value = result12
    BTCSheet.cell(lenBTCSheet+1, 27).value = ahndate1
    BTCfile.save('C:/Users/ahnss/Desktop/BTCfile.xlsx')
    # ========================================================================================================
    sleep(1)
    # ========================================================================================================
    #  기존 엑셀 파일 불러와서 100개만 graphfile.xlsx에 저장하고 그래프 만들기
    BTCfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/BTCfile.xlsx", data_only=True)
    BTCSheet = BTCfile['Sheet']
    #print(" BTCfile-->갯수 : ",len(BTCSheet['A']))
    lenBTCSheet = len(BTCSheet['A'])
    # 마지막 값이 존재하는 셀(row): sheet.max_row
    # 마지막 값이 존재하는 셀(column): sheet.max_column
    # ---------------------------------------------------
    #  챠트 그려넣어 이메일 보낼 파일 불러오기
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    #print("before delete : ",graphSheet.cell(graphSheet.max_row, 1).value)
    graphSheet.delete_rows(1, graphSheet.max_row + 1)
    #print("after delete : ",graphSheet.cell(graphSheet.max_row, 1).value)
    # ----------------------------------------------------
    # ----------------------------------------------------
    graphSheet.cell(1, 1).value = 'nowDatetime'
    graphSheet.cell(1, 2).value = 'BTCpriceNow'
    graphSheet.cell(1, 3).value = 'BTCprice'
    graphSheet.cell(1, 4).value = 'BTCmaxprice'
    graphSheet.cell(1, 5).value = 'BTCminprice'
    graphSheet.cell(1, 6).value = 'BTCdiff'
    graphSheet.cell(1, 7).value = 'nowDatetime'
    graphSheet.cell(1, 8).value = 'buycnt'
    graphSheet.cell(1, 9).value = 'sellcnt'
    graphSheet.cell(1, 10).value = 'nowDatetime'
    graphSheet.cell(1, 11).value = 'buyamt'
    graphSheet.cell(1, 12).value = 'sellamt'
    graphSheet.cell(1, 13).value = 'ttlamt'
    # ---------------------------------------------------
    graphSheet.cell(1, 14).value = 'nowDatetime'
    graphSheet.cell(1, 15).value = 'marketcnt'
    graphSheet.cell(1, 16).value = 'marketamt'
    graphSheet.cell(1, 17).value = 'marketper'
    graphSheet.cell(1, 18).value = 'nowDatetime'
    graphSheet.cell(1, 19).value = 'ahncntper'
    graphSheet.cell(1, 20).value = 'ahnamtper'
    graphSheet.cell(1, 21).value = 'ahnttlper'
    graphSheet.cell(1, 22).value = 'ahnperper'
    graphSheet.cell(1, 23).value = 'BTCdiff'
    graphSheet.cell(1, 24).value = 'ahnresult'
    graphSheet.cell(1, 25).value = 'result11'
    graphSheet.cell(1, 26).value = 'result12'
    graphSheet.cell(1, 27).value = 'datetime'
    # ---------------------------------------------------
    j = 1
    graphcnt = 100

    for i in range(lenBTCSheet - graphcnt + 1, lenBTCSheet + 1):
        j = j + 1
        graphSheet.cell(j, 1).value = BTCSheet.cell(i, 1).value
        graphSheet.cell(j, 2).value = BTCSheet.cell(i, 2).value
        graphSheet.cell(j, 3).value = BTCSheet.cell(i, 3).value # BTCprice
        graphSheet.cell(j, 4).value = BTCSheet.cell(i, 4).value
        graphSheet.cell(j, 5).value = BTCSheet.cell(i, 5).value
        graphSheet.cell(j, 6).value = BTCSheet.cell(i, 6).value
        graphSheet.cell(j, 7).value = BTCSheet.cell(i, 7).value
        graphSheet.cell(j, 8).value = BTCSheet.cell(i, 8).value
        graphSheet.cell(j, 9).value = BTCSheet.cell(i, 9).value
        graphSheet.cell(j, 10).value = BTCSheet.cell(i, 10).value
        graphSheet.cell(j, 11).value = BTCSheet.cell(i, 11).value
        graphSheet.cell(j, 12).value = BTCSheet.cell(i, 12).value
        graphSheet.cell(j, 13).value = BTCSheet.cell(i, 13).value  # ttlamt
        graphSheet.cell(j, 14).value = BTCSheet.cell(i, 14).value
        graphSheet.cell(j, 15).value = BTCSheet.cell(i, 15).value  # marketcnt
        graphSheet.cell(j, 16).value = BTCSheet.cell(i, 16).value  # marketamt
        graphSheet.cell(j, 17).value = BTCSheet.cell(i, 17).value  # marketper
        graphSheet.cell(j, 18).value = BTCSheet.cell(i, 18).value
        graphSheet.cell(j, 19).value = BTCSheet.cell(i, 19).value  # ahncntper
        graphSheet.cell(j, 20).value = BTCSheet.cell(i, 20).value  # ahnamtper
        graphSheet.cell(j, 21).value = BTCSheet.cell(i, 21).value  # ahnttlper
        graphSheet.cell(j, 22).value = BTCSheet.cell(i, 22).value  # ahnperper
        graphSheet.cell(j, 23).value = BTCSheet.cell(i, 23).value  # BTCdiff
        graphSheet.cell(j, 24).value = BTCSheet.cell(i, 24).value  # ahnresult
        graphSheet.cell(j, 25).value = BTCSheet.cell(i, 25).value  # result11
        graphSheet.cell(j, 26).value = BTCSheet.cell(i, 26).value  # result12
        graphSheet.cell(j, 27).value = BTCSheet.cell(i, 27).value  # date

    # ---------------------------------------------------
    # ---------------------------------------------------
    # ---------------------------------------------------
    marketcntold = graphSheet.cell(graphcnt, 15).value
    marketamtold = graphSheet.cell(graphcnt, 16).value
    marketperold = graphSheet.cell(graphcnt, 17).value
    ttlamtold = graphSheet.cell(graphcnt, 13).value
    BTCdiffold = graphSheet.cell(graphcnt, 23).value
    BTCdiffoldold = graphSheet.cell(graphcnt-1, 23).value
    # ---------------------------------------------------
    #print(ahndate1, ahndate2, " =======> ", BTCpriceNow, "   ", BTCprice, "   BTCmaxprice :", BTCmaxprice, " = ", BTCminprice, " BTCdiff=", BTCdiff," BTCdiffold=", BTCdiffold)
    # ---------------------------------------------------
    # ---------------------------------------------------
    ahncntper = marketcnt / marketcntold * 100
    ahnamtper = marketamt / marketamtold * 100
    ahnperper = marketper / marketperold * 100
    ahnttlper = ttlamt / ttlamtold * 100

    ahncntper = int(ahncntper)
    ahnamtper = int(ahnamtper)
    ahnttlper = int(ahnttlper)
    ahnperper = int(ahnperper)

    graphSheet.cell(graphcnt+1, 19).value =  ahncntper   # BTCfile.xlsx에는 0으로 되어있고 graphfile.xlsx에만 들어간다
    graphSheet.cell(graphcnt+1, 20).value =  ahnamtper   # BTCfile.xlsx에는 0으로 되어있고 graphfile.xlsx에만 들어간다
    graphSheet.cell(graphcnt+1, 21).value =  ahnttlper   # BTCfile.xlsx에는 0으로 되어있고 graphfile.xlsx에만 들어간다
    graphSheet.cell(graphcnt+1, 22).value =  ahnperper   # BTCfile.xlsx에는 0으로 되어있고 graphfile.xlsx에만 들어간다
    # ---------------------------------------------------
    # ---------------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    BTCfile.close()
    sleep(1)
    #print(i, lenBTCSheet,"  BTCdiff=", BTCdiff,BTCdiffold," percent 증가율 검토 : cnt=",marketcnt, marketcntold, ahncntper,"  amt=",marketamt, marketamtold, ahnamtper,"  per=",marketper, marketperold, ahnperper)
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 알림 1
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------    # --------------------------------------------------------------------
    #if (BTCdiff >=100 or BTCdiff <= -100):
    #if (BTCpriceNow-BTCprice >=200 or BTCpriceNow-BTCprice <= -200 or (Btcdiff>0 and Btcdiffold<0) or (Btcdiff<0 and Btcdiffold>0)):
    #if (BTCpriceNow - BTCprice >= 200 or BTCpriceNow - BTCprice <= -200 or (BTCdiff > 0 and BTCdiffold < 0) or (
    #            BTCdiff < 0 and BTCdiffold > 0)):
    if ((BTCdiff > 0 and BTCdiffold < 0 and BTCdiffold-BTCdiffoldold >10) or (
                BTCdiff < 0 and BTCdiffold > 0 and BTCdiffold-BTCdiffold < -10)):
        print(ahndate1 ,ahndate2 , " =======>  BTCdiff=",BTCdiff,"    BTCdiffold=",BTCdiffold,"    BTCdiffoldold=",BTCdiffoldold,"    BTCdiffold-BTCdiffold=",BTCdiffold-BTCdiffold)
        # ----------------------------------------------------
        with open("C:/Users/ahnss/Desktop/BTCtxt.txt", mode="a", encoding="cp949") as f:
            p = ahndate1 + " " + ahndate2 + "  =======>  BTCdiff="+str(BTCdiff)+"    BTCdiffold="+str(BTCdiffold)+"   BTCdiffoldold="+str(BTCdiffoldold)+"    BTCdiffold-BTCdiffold="+str(BTCdiffold-BTCdiffold)
        # ----------------------------------------------------") " + "  \n"
            f.write(p)
        # -----------------------------------------------
        # ----------------------------------------------------
        # 경보
        # --------------------------------------------------------------------
        def beepsound():
            freq = 500  # range : 37 ~ 32767
            dur = 1000  # ms
            ws.Beep(freq, dur)  # winsound.Beep(frequency, duration)

        if (now.hour >= 6 and now.hour <= 20):
            print(beepsound())
            print(beepsound())
            print(beepsound())
            print(beepsound())
            print(beepsound())
       # ========================================================================================================

    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 알림 2
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    #if ((marketcnt >= 100 and ahncntper >= 150) or (marketamt >= 100 and ahnamtper >= 150) or (marketper >= 100 and ahnperper >= 150)):
    if (((marketcnt >= 300 and ahncntper >= 105 and marketamt >= 1000 and ahnamtper >= 105 and marketper >= 1500 and ahnperper >= 105)
       or (marketcnt <= 50 and ahncntper <= 50 and marketamt <= 50 and ahnamtper <= 50 and marketper <= 50 and ahnperper <= 50)) and (ttlamt >= 1000 and ahnttlper >= 120)):

        print(ahndate1 ,ahndate2 , " marketcnt >= 300 marketamt >= 1000 marketper >= 1500  ttlamt >= 1000 ahnttlper >= 120 cnt(",
              marketcnt," ", marketcntold,") ", ahncntper, "  amt=(",marketamt,"% ", marketamtold,"% ",  ahnamtper,"%)  T(", marketper,"% ",marketperold,"% ", ahnperper,"%)  ttlamt >= 1000 :",ttlamt,"  amtttlper>=120:",  ahnttlper, "%) ",ahnresult)
        # ----------------------------------------------------
        # ----------------------------------------------------
        with open("C:/Users/ahnss/Desktop/BTCtxt.txt", mode="a", encoding="cp949") as f:
            p = ahndate1 + " " + ahndate2 + "  marketcnt >= 300 marketamt >= 1000 marketper >= 1500  ttlamt >= 1000 ahnttlper >= 120  cnt(" + str(marketcnt) + " " + str(
                marketcntold) + " " + str(ahncntper) + ")%    amt( " + str(marketamt) + "% " + str(marketamtold) + "% " + str(ahnamtper) + "%) T:("  + str(marketper) + "% " + str(marketperold) + "% " + str(ahnperper) + "%) ttlamt >= 1000 "+str(ttlamt)+" >=120:"+ str(
                ahnttlper)+"%) " + str(ahnresult) + "% \n"
            f.write(p)
            # -----------------------------------------------
        # ----------------------------------------------------
        # ----------------------------------------------------
        # 경보
        # --------------------------------------------------------------------
        # --------------------------------------------------------------------
        def beepsound():
            freq = 1000  # range : 37 ~ 32767
            dur = 1000  # ms
            ws.Beep(freq, dur)  # winsound.Beep(frequency, duration)
            ws.Beep(freq, dur)  # winsound.Beep(frequency, duration)
            ws.Beep(freq, dur)  # winsound.Beep(frequency, duration)
        if (now.hour >= 6 and now.hour <= 20):
            print(beepsound())
        # ----------------------------------------------------
        # ----------------------------------------------------
        # 메일 보내기
        # --------------------------------------------------------------------
        # --------------------------------------------------------------------
        name = "ahnsangkoo"
        emailid = "ahnssi9@hanmail.net"

        # 제목, 본문 작성
        msg = MIMEMultipart()
        msg['Subject'] = " ** marketper="+str(marketper)+"   ahnresult  : "+str(ahnresult)+result11+result12
        msg.attach(MIMEText('  내 삶의 행복한 순간  ', 'plain'))

        # 파일첨부 (파일 미첨부시 생략가능)
        attachment = open('C:/Users/ahnss/Desktop/graphfile.xlsx', 'rb')
        part = MIMEBase('application', 'octet-stream')
        part.set_payload((attachment).read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment', filename=('UTF-8', '', 'graphfile.xlsx'))
        msg.attach(part)

        # 세션생성, 로그인
        smtpserver = 'smtp.gmail.com:587'
        s = smtplib.SMTP(smtpserver)
        s.starttls()
        s.login('ahnssi98@gmail.com', 'fcwwkgkglatjqwhx')

        # 메일 전송
        s.sendmail("   Center", emailid, msg.as_string())
        s.quit()
        # ----------------------------------------------------
        #print(ahndate1 ,ahndate2 ," ---   메일보내기   marketper  = ",marketper,"%    ahnresult   : ",ahnresult,"%     " ,result11,result12," ",name,  emailid + ' \n')
        # ----------------------------------------------------
        with open("C:/Users/ahnss/Desktop/BTCtxt.txt", mode="a", encoding="cp949") as f:
            p = ahndate1 + " " + ahndate2 + "  ---- 메일보내기  ---->" + str(marketper) + "%   " + str(ahnresult) + "%    " +result11 + " " + result12 + "  "+name+" "+emailid +" \n"
            f.write(p)
        # -----------------------------------------------
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    #
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    #print(" graphSheet -->갯수 : ",len(graphSheet['A']))
    lengraphSheet = len(graphSheet['A'])
    # --------------------------------------------------------------------
    # ---------------------------------------------------
    #  lengraphSheet 아용하여 각종 자료 출력하기
    # ---------------------------------------------------
    # ----------------------------------------------------
    print(ahndate1,ahndate2," BTC(", BTCpriceNow,BTCprice,BTCmaxprice, BTCminprice, " ",BTCdiff,":",BTCdiffold, ") (",BTCdiffoldold," ",BTCdiffold-BTCdiffoldold,") cnt(", buycnt,
          "/", sellcnt, "=", marketcnt," ", ahncntper,"%)  amt(", buyamt, "/", sellamt, "=", marketamt," ", ahnamtper, "%) T%=(" ,marketper," ", ahnperper,"%) Tamt=(",
          ttlamt,ahnttlper,"%) <",ahnresult,"% ", result11, result12,">")
    # ---------------------------------------------------
    # ---------------------------------------------------
    with open("C:/Users/ahnss/Desktop/BTCtxt.txt", mode="a", encoding="cp949") as f:
        p = ahndate1+" "+ ahndate2+" BTC(" + str(BTCpriceNow) + " " + str(BTCprice)+" " +  str(BTCmaxprice)+" " +  str(BTCminprice) +" "+str(BTCdiff)+":"+str(BTCdiffold)+") "+str(BTCdiffoldold)+" "+str(BTCdiffold-BTCdiffoldold)+") cnt(" + str(buycnt) + "/" + str(sellcnt) + " " + str(
            marketcnt)  + " " + str(ahncntper) + "%)  amt(" + str(buyamt) + "/" + str(sellamt) + " " + str(marketamt)+ " " + str(ahnamtper) + "%)  T%=(" + str(marketper)+ " " + str(ahnperper) + "%) Tamt=( " + str(
            ttlamt)+ " " + str(ahnttlper) + "%) <" + str(ahnresult) + "% " + result11 + " " +  result12 + ">  \n"
        f.write(p)
    # -----------------------------------------------
    # -----------------------------------------------
    # ---------------------------------------------------
    #  챠트 그려넣기
    # ---------------------------------------------------
    # -----------------------
    # 차트 초기화
    # -----------------------
    # -----------------------
    # chart = Barchart()
    chart = LineChart()
    # -----------------------------------------------
    # -----------------------------------------------
    #chart.title = name + " 스토리지 [" + storageno + "] CFX 보상량"
    chart.x_axis.title = '2022년'
    chart.y_axis.title = 'BTC PRICE'

    # ------ 가격
    # ------CHARDATA B1-E1 (2,1)-(5,1)
    # ------CATEGORY(일시) A1-A41 (1,1)-(1,41)
    # --------------------------------------------------------------------
    # chartData  BTC 가격 B1:E41  min_col = 2,min_row = 1,(B1) max_col = 5 , max_row = 41(E41) )
    chartData = Reference(graphSheet, min_col=2, min_row=(lengraphSheet) - graphcnt, max_col=5, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시 A2 :A41  min_col = 1, 	min_row=2, max_row=41
    # --------------------------------------------------------------------
    category = Reference(graphSheet, min_col=1, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    #  category ---> y축 간격은 자동으로 계산됨
    # --------------------------------------------------------------------
    chart.add_data(chartData, titles_from_data=True)  # title_from_data는 범례 값
    chart.set_categories(category)
    # --------------------------------------------------------------------
    # -------------------------------------------------------------------
    # ----------------------------------------------------
    # 중간중간 꾸미기 글자키우기 색상 넣기 등
    # --------------------------------------------------------------------
    for row in graphSheet['F2:F25']:
        for cell in row:
            cell.border = border_thin
            cell.number_format = '0.00'

    for row in graphSheet['C2:C25']:
        for cell in row:
            cell.alignment = align_vcenter
            cell.fill = fill_lightgrey

    for row in graphSheet['B2:B25']:
        for cell in row:
            cell.alignment = align_vcenter
            cell.fill = fill_orange
    # ----------------------------------------------------
    # 완성된 챠트를 그리기
    # -----------------------------------------------
    graphSheet.add_chart(chart, 'A1')
    # -----------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    # ----------------------------------------------------
    # print("------챠트완성 graphfile.xlsx 저장 ---------------------")
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # -----------------------------------------------
    # ------------------------------------------------------------------------------------
    #  챠트 그려넣기 2
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    # print(" graphSheet -->갯수 : ",len(graphSheet['A']))
    lengraphSheet = len(graphSheet['A'])
    # ----------------------------------------------------
    # print("------LineChart 챠트그리기 시작 ---------------------")
    # 차트 초기화
    # chart = Barchart()
    chart = LineChart()

    # chart.title = name + " 스토리지 [" + storageno + "] CFX 보상량"
    chart.x_axis.title = '2022년'
    chart.y_axis.title = 'BUY/SELL CNT'
    # --------------------------------------------------------------------
    # ------BUYCNT-SELLCNT
    # ------CHARDATA K1-M41 (11,1) - (13,41)
    # ------CATEGORY(일시) J1-J41  (10,1)-(10,41)
    # ------BUYCNT
    # ------CHARDATA H1-I41 (8,1) - (9,41)
    # ------CATEGORY(일시) G1-G41 (7,1)-(7,41)
    # --------------------------------------------------------------------
    # chartData  BUY CNT H1:I41  min_col = 8,min_row = 1,(H1) max_col = 9 , max_row = 41(I41) )
    chartData = Reference(graphSheet, min_col=8, min_row=(lengraphSheet) - graphcnt, max_col=9, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시 G1-G41  min_col = 7, min_row=2, max_row=41
    # --------------------------------------------------------------------
    #category = Reference(graphSheet, min_col=7, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시 A2 :A41  min_col = 1, 	min_row=2, max_row=41
    # --------------------------------------------------------------------
    category = Reference(graphSheet, min_col=1, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    #  category ---> y축 간격은 자동으로 계산됨
    # --------------------------------------------------------------------
    chart.add_data(chartData, titles_from_data=True)  # title_from_data는 범례 값
    chart.set_categories(category)
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 완성된 챠트를 그리기
    # -----------------------------------------------
    graphSheet.add_chart(chart, 'K1')
    # -----------------------------------------------
    # print("------챠트완성하여 graphfile.xlsx 저장 ---------------------")
    # ----------------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    #  챠트 그려넣기 3
    # ------------------------------------------------------------------------------------
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    # print(" graphSheet -->갯수 : ",len(graphSheet['A']))
    lengraphSheet = len(graphSheet['A'])
    # ----------------------------------------------------
    # print("------LineChart 챠트그리기 시작 ---------------------")
    # 차트 초기화
    # chart = Barchart()
    chart = LineChart()

    # chart.title = name + " 스토리지 [" + storageno + "] CFX 보상량"
    chart.x_axis.title = '2022년'
    chart.y_axis.title = 'BUY/SELL AMT'
    # --------------------------------------------------------------------
    # ------BUYAMT-TTLAMT
    # ------CHARDATA K1-M41 (11,1) - (13,41)
    # ------CATEGORY(일시) J1-J41  (10,1)-(10,41)

    # --------------------------------------------------------------------
    # chartData  BUYAMT-TTLAMT K1-M41  min_col = 11,min_row = 1,(k1) max_col = 13 , max_row = 41(M41) )
    chartData = Reference(graphSheet, min_col=11, min_row=(lengraphSheet) - graphcnt, max_col=13,
                          max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시 J1-J41  min_col = 10, 	min_row=2, max_row=41
    # --------------------------------------------------------------------
    category = Reference(graphSheet, min_col=10, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    #  category ---> y축 간격은 자동으로 계산됨
    # --------------------------------------------------------------------
    chart.add_data(chartData, titles_from_data=True)  # title_from_data는 범례 값
    chart.set_categories(category)
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 완성된 챠트를 그리기
    # -----------------------------------------------
    graphSheet.add_chart(chart, 'K8')
    # -----------------------------------------------
    # print("------챠트완성하여 graphfile.xlsx 저장 ---------------------")
    # ----------------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    #  챠트 그려넣기 4
    # ------------------------------------------------------------------------------------
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    # print(" graphSheet -->갯수 : ",len(graphSheet['A']))
    lengraphSheet = len(graphSheet['A'])
    # ----------------------------------------------------
    # print("------LineChart 챠트그리기 시작 ---------------------")
    # 차트 초기화
    # chart = Barchart()
    chart = LineChart()

    # chart.title = name + " 스토리지 [" + storageno + "] CFX 보상량"
    chart.x_axis.title = '2022년'
    chart.y_axis.title = 'MARTKETPERCENT'
    # --------------------------------------------------------------------
    # ------MARTKETPERCENT
    # ------CHARDATA O1-Q41 (15,1) - (17,41)
    # ------CATEGORY(일시) N1-N41 (14,1) - (14,41)

    # --------------------------------------------------------------------
    # chartData  MARTKETPERCENT O1-Q41  min_col = 15,min_row = 1,(O1) max_col = 17 , max_row = 41(Q41) )
    chartData = Reference(graphSheet, min_col=15, min_row=(lengraphSheet) - graphcnt, max_col=17,
                          max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시  N1-N41  min_col = 14, 	min_row=2, max_row=41
    # --------------------------------------------------------------------
    category = Reference(graphSheet, min_col=14, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    #  category ---> y축 간격은 자동으로 계산됨
    # --------------------------------------------------------------------
    chart.add_data(chartData, titles_from_data=True)  # title_from_data는 범례 값
    chart.set_categories(category)
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 완성된 챠트를 그리기
    # -----------------------------------------------
    graphSheet.add_chart(chart, 'K15')
    # -----------------------------------------------
    # print("------챠트완성하여 graphfile.xlsx 저장 ---------------------")
    # ----------------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    # ------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------
    #  챠트 그려넣기 5
    # ------------------------------------------------------------------------------------
    graphfile = openpyxl.load_workbook(filename="C:/Users/ahnss/Desktop/graphfile.xlsx", data_only=True)
    graphSheet = graphfile['Sheet1']
    # print(" graphSheet -->갯수 : ",len(graphSheet['A']))
    lengraphSheet = len(graphSheet['A'])
    # ----------------------------------------------------
    # print("------LineChart 챠트그리기 시작 ---------------------")
    # 차트 초기화
    # chart = Barchart()
    chart = LineChart()

    # chart.title = name + " 스토리지 [" + storageno + "] CFX 보상량"
    chart.x_axis.title = '2022년'
    chart.y_axis.title = 'ahnper BTCdiff ahnresult'
    # --------------------------------------------------------------------
    # ------ahnper
    # ------CHARDATA S1-X41 (19,1) - (24,41)
    # ------CATEGORY(일시) R1-R41 (18,1) - (18,41)

    # --------------------------------------------------------------------
    # chartData  ahnper S1-X41 (19,1) - (24,41)  min_col = 19,min_row = 1, max_col = 24 , max_row = 41
    chartData = Reference(graphSheet, min_col=19, min_row=(lengraphSheet) - graphcnt, max_col=24,
                          max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    # category  ---> x축 날짜 표시  R1-R41  min_col = 18, 	min_row=2, max_row=41
    # --------------------------------------------------------------------
    category = Reference(graphSheet, min_col=18, min_row=(lengraphSheet) - graphcnt, max_row=(lengraphSheet))
    # --------------------------------------------------------------------
    #  category ---> y축 간격은 자동으로 계산됨
    # --------------------------------------------------------------------
    chart.add_data(chartData, titles_from_data=True)  # title_from_data는 범례 값
    chart.set_categories(category)
    # --------------------------------------------------------------------
    # --------------------------------------------------------------------
    # 완성된 챠트를 그리기
    # -----------------------------------------------
    graphSheet.add_chart(chart, 'A11')
    # -----------------------------------------------
    # print("------챠트완성하여 graphfile.xlsx 저장 ---------------------")
    # ----------------------------------------------------
    graphfile.save('C:/Users/ahnss/Desktop/graphfile.xlsx')
    graphfile.close()
    # ------------------------------------------------------------------------------------
    sleepsec = 600  # 10분
    if (now.hour >= 21 and now.hour <= 24):
        sleepsec = 1800 #  30분
    if (now.hour >= 0 and now.hour <= 4):
        sleepsec = 1800 #  1시간
    # ----------------------------------------------------
    sleep(sleepsec)
# --------------------------------------------------------------------